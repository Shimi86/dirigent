
Review the AppState flags, make it less confusing. Use one application state enum + just a few additional flags..

Multiple independent <WindowPos /> sections per single application to control multiple application windows.

Send launch plan over the network as XML string and parse it on each endpoint - no need to have comparable AppDefs etc.

Build installer [not needed]

Application Multiselect & bulk operations in the Control GUI.

New option for the apps: `KillOnAdopt`. If an application is already running when starting a plan that contains an app with the same name, the running one is killed. This is usefull if the app has the same name but different attributes and we want it to be started with those attributes from the new plan.

Remote monitoring of machines. Shutting them down, starting them up. Works only if the machines are listed in the shared config together with their MAC addresses.

Remote execution of ANY command on selected machine(s). 

Support for applications that are never started automatically, just manually (always excluded from plan).

Support for disabling an application before starting a launch plan.

Support for multiple retries when launching a problematically starting application.

Failure timeout for boot up detector.

Prevent multiple instances of agent with the same name (machineId:port)

Script based procesing for agentcmd.

[DONE] Show "??? (disconnected)" as the status for a remote app if agent not connected to master. Also disallow Launch/Kill for remote apps in this case. This should avoid the error Machineid 'm2.a' is not the one of this computer. Happens when trying to kill a remote app in local disconnected mode.

[DONE] Show "??? (no info for xx secs)" as the status for a remote app if no new updates have come from the remote agent for a longer period of time (longer than normal update period).

[DONE] Autorestart an app after crash.

[REJECTED] Run server process om master machine automatically on agent start. Reset the server process if server already running.
[DONE] Allow for non-windowed mode (console app for linux, windows service).
[DONE] Extract the preparation of agent configuration into a separate class and use it for non-windowed mode.
[DONE] Separate main GUI form into a reusable library, requiring just IDirigentControl.
[DONE] NetworkOperations to use just IDirigentCOntrol instead of LocalOperations.
[DONE] Two flavors of GUI - one with embedded agent and one that connect remotely to a session without starting its own agent instance.

[DONE] Make the master know the shared config and provide it to agents. Synchronize shared configuration upon connection to master. Resolve conflicts with locally stored config.

[DONE] Make shared config at agent optional. Make the use of it only until the connection to master is estabilished.

[DONE] Make the master know the current lauch plan and provide it to agents. Agent loads it upon connection to master.

[DONE] Add log4net logging. In non-windowed mode, log the exceptions using log4net.

[DONE] Add command line options to specify the config files, initial launch plan to follow etc.

[REJECTED] Server as windows service (maybe through a 3rd party service loader app??) Or just TrayApp will be used instead? Service would allow starting processes on without any user logged in (which is not much useful).

[DONE] Combine multiple operational modes into one single agent app (local, networked, tray GUI app...)

[DONE] Create commandline tool for sending commands to agents.

[DONE] Support for autorestart of app after unexpected termination. Add crashed app to launch sequencer when crash is detected..

[DONE] Kill whole process tree on StopApp, not just a single process.

[DONE] Support for application windowstyle  attributes (hidden, minimized, maximized)

[DONE] Multiple coexisting plans that share the applications.

[DONE] Support for additional application window attributes (topmost, always on top) - through WindowStyle attribute

[DONE] Generic AppWatchers. Watch the app and do something. COnfigured from XML node which is parsed by AppWatcher, not by a global parser.

[DONE] Support for applying application window position and size shortly after the window with given title appears. Through section <WindowPos titleregexp="\s-\sNotepad" rect="10,50,300,200" screen="1" keep="0" /> 
