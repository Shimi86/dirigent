Fix: Dirigent master crashes on starting a process whose directory is invalid, after showing proper error message on the node that issued the command.


MultiPlan changes
 - Multiple plans can run simultanously (expected not to collide with each other). No longer the concept of a globally selected single plan. Selected plan concept now works only in a single GUI agent as its internal state, not globally across agents anymore.
 - IDirigentControl
	- [DONE] SelectPlan works only in local agent's scope
	- [DONE] GetCurentPlan works only in local agent's scope
	- [DONE] each plan manipulation method takes ILaunchPlan as parameter

 - TimeOut for plan operations
   - [DONE] Starting: success when all apps have been launched and those that shall be running are still running
 
 - [REJECTED] Plan control interface (Start/Kill/Restart) move to ILaunchPlan. Only plan enumaration remains in IDirigentControl
 - [REJECTED] Plan status interface (GetPlanState returning both OpMode and OpStatus) move to ILaunchPlan.
 - [DONE] Plan interpretter classes (LaunchDepsChecker, LaunchSequencer) are instantiated per plan, not as a single instance. Probably requiring local op storage for additional plan info separately from planRepo (i.e. not part of ILaunchPlan), something like planRuntimeInfo map indexed by plan name.
 - A plan has new operation state attributes
   - [REJECTED] OpMode - None/Kill/Start/Restart... what most recent operation was perfromaned with the plan [UPDATE] Just whether the plan is running or not suffices. Kill is immediate, restart is a sequence of Kill and Start.
   - [DONE] OpStatus - None/OK/InProgress/Failed ... what is the
   - These are shared info needed by all participants and shall be part of ILaunchPlan interface and communicated to all agents.
   - [DONE] Who owns the OpMode? Can be stored locally on each agent [YES], synchronized just by a command message StartPlan, StopPlan, KillPlan, RestartPlan? For late connected agents we need a central MasterAgent as the command message is missed... [DONE]
   - [DONE] Who determines the status of a plan? Plan status should be derived from the status of its applications, locally on each agent, any time. No central storage required... 
   Concept of Master Agent is required?? [NO]
   - [NOT REQUIRED IN DECENTRALIZED DESIGN?] New structure PlanState containing the current state of a plan. New message PlansStateMessage containing dictionary of states of all plans (like AppsStateMessage). This is necessary only for client connected after the plan was already started. Who shall send this message? Selected agent, the one that has to run always - the MasterAgent.    

 - MasterAgent
   - An agent with IDirigentControl interface, running a message server service locally in a single application if configured so. May have local operations.
   - Master's network server should be converted into a library that is linked to Master as well as to MasterAgent.
   - [DONE] Has telnet-style interface for remote control.
   - Owner of plan state? Better to do it in a centralized way...
 

Computer name as agent's machineId  automatically? If machineId from config/cmdline is empty, use computer name
 
Dirigent config defined "macro variables" that can be used within dirigent config in similar way as environment variables. Config-variables will be resolved first and can be overriden by envvars.
  - whole-config scope
        <Shared>
            <Set Variable="xyz">
  - launch plan scope
        <Shared>
            <Plan Name="plan1">
                <Set Variable="xyz">
    
  - application definition local (%APPNAME%)

Autoupdate feature: on network message locate new binaries (in some subdir), run an updater process with instructions how to update and how to restart after that. Updater process copies binaries from the subdir and re-launches the agent, now running from new updated binaries.
  
Define config variables on agent's command line

Fix: Object reference not set exception sometimes when launching a process

Fix: Application sometimes left open and forgotten by dirigent, still running and can not be killed by dirigent. Happens for example if the app is started via shell and the KILL command comes just when the shell is starting the app. The shell gets killed, the started app does not.

Option to redirect standard and error output of a launched process.

Add InitDetector that fires when a process-owned window appears with title matching given regexp. [DONE]

Support for relative working directory specification for a process, taking dirigent's working directory as a basis. [DONE]

Review the AppState flags, make it less confusing. Use one application state enum + just a few additional flags..

Application Multiselect & bulk operations in the Control GUI.

New option for the apps: `KillOnAdopt`. If an application is already running when starting a plan that contains an app with the same name, the running one is killed. This is usefull if the app has the same name but different attributes and we want it to be started with those attributes from the new plan. Or if the dirigent agent crashes and we want it to regain control after restarting.

Remote monitoring of machines. Shutting them down, starting them up. Works only if the machines are listed in the shared config together with their MAC addresses.

Remote execution of ANY command on selected machine(s). 

Support for applications that are never started automatically, just manually (always excluded from plan).

Support for disabling an application before starting a launch plan. NOT MUCH USED

Support for multiple retries when launching a problematically starting application.

Failure timeout for app bootup detector.

[DONE] One agent to run/keep alive master process automatically (command line option --IsMaster 1)

[DONE] Prevent multiple instances of agent with the same name (machineId:port)

[NOT IMPORTANT] Send launch plan over the network as XML string and parse it on each endpoint - no need to have comparable AppDefs etc. NOT MUCH NEEDED

[DONE] Script based procesing for agentcmd. REPLACED WITH MULTIPLE SEMICOLON SEPARATED COMMANDS

[NOT IMPORTANT] Build installer 

[DONE] Multiple independent <WindowPos /> sections per single application to control multiple application windows.

[DONE] Show "??? (disconnected)" as the status for a remote app if agent not connected to master. Also disallow Launch/Kill for remote apps in this case. This should avoid the error Machineid 'm2.a' is not the one of this computer. Happens when trying to kill a remote app in local disconnected mode.

[DONE] Show "??? (no info for xx secs)" as the status for a remote app if no new updates have come from the remote agent for a longer period of time (longer than normal update period).

[DONE] Autorestart an app after crash.

[REJECTED] Run server process om master machine automatically on agent start. Reset the server process if server already running.
[DONE] Allow for non-windowed mode (console app for linux, windows service).
[DONE] Extract the preparation of agent configuration into a separate class and use it for non-windowed mode.
[DONE] Separate main GUI form into a reusable library, requiring just IDirigentControl.
[DONE] NetworkOperations to use just IDirigentCOntrol instead of LocalOperations.
[DONE] Two flavors of GUI - one with embedded agent and one that connect remotely to a session without starting its own agent instance.

[DONE] Make the master know the shared config and provide it to agents. Synchronize shared configuration upon connection to master. Resolve conflicts with locally stored config.

[DONE] Make shared config at agent optional. Make the use of it only until the connection to master is estabilished.

[DONE] Make the master know the current lauch plan and provide it to agents. Agent loads it upon connection to master.

[DONE] Add log4net logging. In non-windowed mode, log the exceptions using log4net.

[DONE] Add command line options to specify the config files, initial launch plan to follow etc.

[REJECTED] Server as windows service (maybe through a 3rd party service loader app??) Or just TrayApp will be used instead? Service would allow starting processes on without any user logged in (which is not much useful).

[DONE] Combine multiple operational modes into one single agent app (local, networked, tray GUI app...)

[DONE] Create commandline tool for sending commands to agents.

[DONE] Support for autorestart of app after unexpected termination. Add crashed app to launch sequencer when crash is detected..

[DONE] Kill whole process tree on StopApp, not just a single process.

[DONE] Support for application windowstyle  attributes (hidden, minimized, maximized)

[DONE] Multiple coexisting plans that share the applications.

[DONE] Support for additional application window attributes (topmost, always on top) - through WindowStyle attribute

[DONE] Generic AppWatchers. Watch the app and do something. COnfigured from XML node which is parsed by AppWatcher, not by a global parser.

[DONE] Support for applying application window position and size shortly after the window with given title appears. Through section <WindowPos titleregexp="\s-\sNotepad" rect="10,50,300,200" screen="1" keep="0" /> 

[DONE] Fix: Dirigent crashes when startupPlan name does not exist in the list of plans

[DONE] Checkbox to exclude app from a plan.
 
